language: cpp
os: linux

compiler:
  - clang

linux_gcc: &linux_gcc
  os: linux
  dist: xenial
  compiler: gcc
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'ppa:mhier/libboost-latest'
      packages:
        - g++-5
        - libgtest-dev
        - boost1.74

linux_clang: &linux_clang
  os: linux
  dist: xenial
  compiler: clang
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-trusty-4.0
        - sourceline: 'ppa:mhier/libboost-latest'
      packages:
        - clang-4.0
        - libgtest-dev
        - boost1.74

jobs:
  include:
  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=True"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Release && SHARED=False"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Release && SHARED=True"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False && SANITIZE=address"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False && COVERAGE=True"

  - <<: *linux_clang
    env:
     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=False"

  - <<: *linux_clang
    env:
     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=True"

  - <<: *linux_clang
    env:
     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Release && SHARED=False"

  - <<: *linux_clang
    env:
     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Release && SHARED=True"

cache:
  - apt: true
  - directories:
    - $HOME/lcov
    - $HOME/gtest
    - $HOME/fmt

before_install:
# Set up CC/CXX variables
  - eval "${MATRIX_EVAL}"
  - export CMAKE=cmake
  - export COVERAGE=${COVERAGE:-False}
  - export SANITIZE=${SANITIZE:-off}

# Install coverage software
  - if [ "$COVERAGE" == "True" ]; then gem install coveralls-lcov; fi

# Workaround for not having lcov 1.13
  - if [ ! -d "lcov/usr/local/bin/lcov" ]; then
      wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.13.orig.tar.gz;
      tar -xzf lcov_1.13.orig.tar.gz;
      mkdir lcov || true;
      DESTDIR=$HOME/lcov make -C lcov-1.13/ install;
    fi
  - export LCOV=$HOME/lcov/usr/local/bin/lcov
  
# workaround for gtest not providing its own libraries (sigh)
  - if [ ! -d "gtest/libgtest.a" ]; then
      mkdir gtest || true;
      cd gtest;
      $CMAKE /usr/src/gtest -DCMAKE_CXX_FLAGS='-fPIC' && make;
      cd ..;
    fi
  - export GTEST_ROOT=$PWD/gtest

# install libfmt
  - if [ ! -d "libfmt/include/fmt/format.h" ]; then
      wget https://github.com/fmtlib/fmt/archive/5.3.0.tar.gz;
      tar -xzf 5.3.0.tar.gz;
      mkdir libfmt || true;
      cd fmt-5.3.0;
      $CMAKE -DCMAKE_INSTALL_PREFIX=$HOME/libfmt -DFMT_TEST=OFF -DCMAKE_CXX_FLAGS='-fPIC' .;
      make -j2 && make install;
      cd ..;
    fi
  - export FMT_ROOT=$HOME/libfmt

before_script:
  - mkdir build || true
  - cd build
  - $CMAKE -DCMAKE_BUILD_TYPE=$CONFIG -DBUILD_SHARED_LIBS=$SHARED -DTERMINALPP_SANITIZE=$SANITIZE -DTERMINALPP_COVERAGE=$COVERAGE -Dfmt_DIR=$FMT_ROOT/lib/cmake/fmt ..

script:
  - make VERBOSE=1
  - if [ "$COVERAGE" == "True" ]; then
        $LCOV --gcov-tool=gcov-5 --base-directory . --directory . --zerocounters -q;
    fi
  - make test

after_failure:
  - cat Testing/Temporary/LastTest.log

after_success:
  - if [ "$COVERAGE" == "True" ]; then
        $LCOV --gcov-tool=gcov-5 --base-directory . --directory .  --capture --output-file coverage.info;
        $LCOV --gcov-tool=gcov-5 --remove coverage.info '*/test/*' '/usr/*' '*/libfmt/*' --output-file coverage.info;
        $LCOV --gcov-tool=gcov-5 --list coverage.info;
        coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi

notifications:
  email:
    on_success: change # [always|never|change] # default: change
    on_failure: change # [always|never|change] # default: always
  slack:
    rooms:
      - kazdragon:${SLACK_TOKEN}#ci
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/${GITTER_TOKEN}
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always
